///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////---->>>>        DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java - - DLB.java       <<<<----////
////																																																   ////
////-->>	Just a simple class to hold DLBNode references.																																			   ////																																									   ////
////																																																   ////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class DLB<S, T> {																							// This is a container for our DLB nodes
	private DLBNode<S, T> rootNode;																					// The head of the first linked list (start state)

	public DLB() {																									// Create new DLB via new empty node
		rootNode = new DLBNode<S, T>();																				// Set start state to new DLB node
	}
	
	public DLBNode<S, T> getRootNode() {																			// Get reference to head of first linked list
		return rootNode;
	}

	public boolean isEmpty() {																						// Look at first linked list head and return true if null
		return getRootNode().hasNoKey();
	}
	
	public DLBNode<S, T> resetRootNode() {
		rootNode = new DLBNode<S, T>();
		return rootNode;
	}
}

	